# -*- coding: utf-8 -*-
"""04_MobileNet+LSTM_model_training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C_-mw4qjopSYQkcMCvLzSsnMn9YQa8AB

# 04. Train LSTM Model

# Import
"""

import numpy as np
import os
import tensorflow as tf
from tensorflow import keras
import time
import matplotlib.pyplot as plt

from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())

"""# 04-A. Load feature datasets
* **`MobileNet_x_train_reshaped_210512.npy`**, **`MobileNet_x_test_reshaped_210512.npy`** : Data that throughed MobileNet and reshaped Numpy arrays
* **`02_label_training_Numpy_210512.npy`**, **`02_label_test_Numpy_210512`** : Label Numpy arrays
"""

X_train_reshaped=np.load('D:/datasets/AllVideo_numpy_list_pickle/MobileNet_x_train_reshaped_210512.npy')
#> (2878, 30, 25600)

X_test_reshaped=np.load('D:/datasets/AllVideo_numpy_list_pickle/MobileNet_x_test_reshaped_210512.npy')
#> (720, 30, 25600)

y_train=np.load('D:/datasets/AllVideo_numpy_list_pickle/02_label_training_Numpy_210512.npy')
#> (2878, 2)

y_test=np.load('D:/datasets/AllVideo_numpy_list_pickle/02_label_test_Numpy_210512.npy')
#> (720, 2)

X_train_reshaped.shape, X_test_reshaped.shape #> (# of video file, # of frame img, 25600)

y_train.shape, y_test.shape #> (# of video file, # of class)

y_train[10:30]

"""# 04-B. Create LSTM Model
* **`chunk_size`** : 5x5x1024
* **`n_chunks`** : fps. # of frame img per second
"""

chunk_size=25600
n_chunks=30

model=keras.models.Sequential()
model.add(keras.layers.LSTM(512, input_shape=(n_chunks, chunk_size))) # (30, 25600)
model.add(keras.layers.Dense(1024))
model.add(keras.layers.Activation('relu'))
model.add(keras.layers.Dense(256))
model.add(keras.layers.Activation('sigmoid'))
model.add(keras.layers.Dense(2))
model.add(keras.layers.Activation('softmax'))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])

model.summary()

keras.utils.plot_model(model, show_shapes=True)

"""# 04-C. Define Callbacks"""

checkpoint_cb=keras.callbacks.ModelCheckpoint('210512_MobileNet_checkpoint_epoch100.h5', save_best_only=True)

"""# 04-D. Train LSTM Model"""

np.random.seed(42)

epoch=100
batchS=500
history=model.fit(x=X_train_reshaped[0:2100], y=y_train[0:2100],
                  epochs=epoch,
                  validation_data=(X_train_reshaped[2100:], y_train[2100:]),
                  callbacks=[checkpoint_cb],
                  batch_size=batchS, verbose=2)

"""# 04-E. Evaluate trained LSTM Model

## 1. Evaluate LSTM Model by using test set
"""

result=model.evaluate(X_test_reshaped, y_test)

""" ## 2. Accuracy & Loss of trained LSTM Model"""

for name, value in zip(model.metrics_names, result):
    print(name, value)

"""## 3. Draw plot of Accuracy & Loss"""

plt.plot(history.history['val_accuracy']) # Draw Accuracy plot
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['validation'], loc='upper left')
plt.savefig('210512_MobileNet_model_accuracy_epoch100.jpg') #save .jpg img of Accuracy plot
plt.show()

plt.plot(history.history['loss']) # Draw Loss plot
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.savefig('210512_MobileNet_model_loss_epoch100.jpg') #save .jpg img of Loss plot
plt.show()

"""# 04-F. Save Model File

"""

model.save('210512_MobileNet_model_epoch100.h5', include_optimizer=True)